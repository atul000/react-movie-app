{"ast":null,"code":"var _jsxFileName = \"/Users/atul/Desktop/movie-app/src/components/Movie/Movie.js\";\nimport React, { Component } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nimport Navigation from \"../elements/Navigation/Navigation\";\nimport MovieInfo from \"../elements/MovieInfo/MovieInfo\";\nimport MovieInfoBar from \"../elements/MovieInfoBar/MovieInfoBar\";\nimport FourColdGrid from \"../elements/FourColGrid/FourColGrid\";\nimport Actor from \"../elements/Actor/Actor\";\nimport Spinner from \"../elements/Spinner/Spinner\";\nimport \"./Movie.css\";\nexport default class Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(res => res.json()).then(res => {\n        console.log(res);\n\n        if (res.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: res\n          }, () => {\n            // fetch actors in setState callback function\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint).then(res => res.json()).then(res => {\n              console.log(res);\n              const directors = res.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: res.cast,\n                directors,\n                loading: false\n              }, () => {\n                localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state));\n              });\n            });\n          });\n        }\n      }).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(`${this.props.match.params.movieId}`)) {\n      const state = JSON.parse(localStorage.getItem(`${this.props.match.params.movieId}`));\n      this.setState({ ...state\n      });\n    } else {\n      this.setState({\n        loading: true\n      }); // fetch movie\n\n      const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n      this.fetchItems(endpoint);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.state.movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: this.props.location.movieName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: this.state.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })) : null, this.state.actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(FourColdGrid, {\n      header: \"Actors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.actors.map((element, i) => {\n      return React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"No Movie Found\") : null, this.state.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/atul/Desktop/movie-app/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColdGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","res","json","console","log","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","catch","err","componentDidMount","getItem","parse","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nimport Navigation from \"../elements/Navigation/Navigation\";\nimport MovieInfo from \"../elements/MovieInfo/MovieInfo\";\nimport MovieInfoBar from \"../elements/MovieInfoBar/MovieInfoBar\";\nimport FourColdGrid from \"../elements/FourColGrid/FourColGrid\";\nimport Actor from \"../elements/Actor/Actor\";\nimport Spinner from \"../elements/Spinner/Spinner\";\nimport \"./Movie.css\";\n\nexport default class Movie extends Component {\n  state = {\n    movie: null,\n    actors: null,\n    directors: [],\n    loading: false\n  };\n\n  componentDidMount() {\n    if (localStorage.getItem(`${this.props.match.params.movieId}`)) {\n      const state = JSON.parse(\n        localStorage.getItem(`${this.props.match.params.movieId}`)\n      );\n      this.setState({ ...state });\n    } else {\n      this.setState({ loading: true });\n      // fetch movie\n      const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n      this.fetchItems(endpoint);\n    }\n  }\n\n  fetchItems = endpoint => {\n    fetch(endpoint)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res);\n        if (res.status_code) {\n          this.setState({ loading: false });\n        } else {\n          this.setState({ movie: res }, () => {\n            // fetch actors in setState callback function\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint)\n              .then(res => res.json())\n              .then(res => {\n                console.log(res);\n                const directors = res.crew.filter(\n                  member => member.job === \"Director\"\n                );\n                this.setState(\n                  {\n                    actors: res.cast,\n                    directors,\n                    loading: false\n                  },\n                  () => {\n                    localStorage.setItem(\n                      `${this.props.match.params.movieId}`,\n                      JSON.stringify(this.state)\n                    );\n                  }\n                );\n              });\n          });\n        }\n      })\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n      <div className=\"rmdb-movie\">\n        {this.state.movie ? (\n          <div>\n            <Navigation movie={this.props.location.movieName} />\n            <MovieInfo\n              movie={this.state.movie}\n              directors={this.state.directors}\n            />\n            <MovieInfoBar\n              time={this.state.runtime}\n              budget={this.state.movie.budget}\n              revenue={this.state.movie.revenue}\n            />\n          </div>\n        ) : null}\n\n        {this.state.actors ? (\n          <div className=\"rmdb-movie-grid\">\n            <FourColdGrid header={\"Actors\"}>\n              {this.state.actors.map((element, i) => {\n                return <Actor key={i} actor={element} />;\n              })}\n            </FourColdGrid>\n          </div>\n        ) : null}\n        {!this.state.actors && !this.state.loading ? (\n          <h1>No Movie Found</h1>\n        ) : null}\n        {this.state.loading ? <Spinner /> : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}